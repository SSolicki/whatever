name: whatever

services:
  ollama:
    image: ollama/ollama:${OLLAMA_DOCKER_TAG}
    container_name: ollama-prod
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    volumes:
      - ollama-prod:/root/.ollama
    networks:
      - whatever_network_prod
    ports:
      - "11434:11434"
    restart: unless-stopped

  whatever:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        OLLAMA_BASE_URL: '/ollama'
        NODE_ENV: ${NODE_ENV}
    image: ghcr.io/whatever/whatever:${WEBUI_DOCKER_TAG-main}
    container_name: whatever-prod
    environment:
      - NODE_ENV=${NODE_ENV}
      - WEBUI_SECRET_KEY=${WEBUI_SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - API_KEY=${API_KEY}
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL}
      - ENABLE_RAG_WEB_SEARCH=true
      - RAG_WEB_SEARCH_ENGINE=searxng
      - RAG_WEB_SEARCH_RESULT_COUNT=3
      - RAG_WEB_SEARCH_CONCURRENT_REQUESTS=10
      - SEARXNG_BASE_URL=${SEARXNG_BASE_URL}
      - SEARXNG_QUERY_URL=${SEARXNG_QUERY_URL}
      - DATABASE_URL=postgresql://whatever:${DB_PASSWORD}@db:5432/whatever
      - DB_PASSWORD=${DB_PASSWORD}
      - DATABASE_POOL_SIZE=${DATABASE_POOL_SIZE}
      - DATABASE_POOL_MAX_OVERFLOW=${DATABASE_POOL_MAX_OVERFLOW}
      - DATABASE_POOL_TIMEOUT=${DATABASE_POOL_TIMEOUT}
      - DATABASE_POOL_RECYCLE=${DATABASE_POOL_RECYCLE}
      - OPENAI_API_BASE_URL=${OPENAI_API_BASE_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - QDRANT_URI=${QDRANT_URI}
      - QDRANT_API_KEY=${QDRANT_API_KEY}
      - VECTOR_SEARCH_ENGINE=${VECTOR_SEARCH_ENGINE}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - SESSION_COOKIE_SECURE=${SESSION_COOKIE_SECURE}
      - SESSION_COOKIE_HTTPONLY=${SESSION_COOKIE_HTTPONLY}
      - SESSION_COOKIE_SAMESITE=${SESSION_COOKIE_SAMESITE}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS}
      - SCARF_NO_ANALYTICS=${SCARF_NO_ANALYTICS}
      - DO_NOT_TRACK=${DO_NOT_TRACK}
      - ANONYMIZED_TELEMETRY=${ANONYMIZED_TELEMETRY}
    volumes:
      - whatever-prod:/app/data
    ports:
      - "80:8080"
    depends_on:
      - ollama
      - searxng
      - qdrant
      - db
    networks:
      - whatever_network_prod
    restart: unless-stopped

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant-prod
    volumes:
      - qdrant-prod:/qdrant/storage
    ports:
      - "6333:6333"
    networks:
      - whatever_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  searxng:
    image: searxng/searxng:latest
    container_name: searxng-prod
    volumes:
      - searxng-data:/etc/searxng
    ports:
      - "8080:8080"
    networks:
      - whatever_network_prod
    restart: unless-stopped
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    security_opt:
      - no-new-privileges:true

  db:
    image: postgres:16
    container_name: db-prod
    environment:
      POSTGRES_USER: whatever
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: whatever
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - whatever_network_prod
    restart: unless-stopped

networks:
  whatever_network_prod:
    driver: bridge

volumes:
  ollama-prod:
  whatever-prod:
  qdrant-prod:
  searxng-data:
  postgres_data:
